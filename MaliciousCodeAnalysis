恶意代码分析的目标
通常是为一起网络入侵事件的响应提供所系信息。所以目标往往是确定到地方生了什么，并确保你能够定位出所有受感染的主机文件。
恶意代码分析可以用来编写出基于主机的和基于网络的检测特征码。
基于主机的特征码（感染迹象）：用于在受感染主机上检测出恶意代码，这些迹象经常是恶意代码所创建或者修改的文件，或是他们对注册表的特定修改。关注恶意代码对系统做了什么，而不是恶意代码本身的特性。
网络特征码：通过监测网络流量来检测恶意代码。可以在没有进行恶意代码分析是创建，但在恶意代码分析帮助下提取的特征码往往是更加有效的，可以提供更高的检测率和更少的误报。

恶意代码分析技术
静态分析：在没有运行恶意代码时对其进行分析的技术。
动态分析：需要运行恶意代码，才能进行分析的技术。

恶意代码的类型：
后门：恶意代码将自身安装到一台计算机来允许攻击者访问，后门程序通常让攻击者只需要很少认证，甚至无需认证，便可连接到远程计算机上，并可以在本地系统执行命令。
僵尸网络:与后门相似，也允许攻击者访问系统。但是所有被同一个僵尸网络感染的计算机将会从一台控制命令服务器接受到相同的命令。
下载器：这是一类只是用来下载其他恶意代码的恶意代码。下载器通常是在攻击者获得系统的访问时首先进行安装的。下载器程序会下载和安装其他的恶意代码。
间谍软件：这是一类从受害计算机上收集信息并发送给攻击者的恶意代码。
启动器：用来启动其他恶意程序的恶意代码。
内核套件：设计用来隐藏其他恶意代码的恶意代码。
勒索软件：设计成吓唬受感染的用户，来勒索他们购买某些东西的恶意代码。
发送邮件的恶意代码：在感染用户计算机之后，便会使用系统与网络资源来发送大量的垃圾邮件。
蠕虫和计算机病毒：可以自我复制和感染其他计算机的恶意代码。

从可执行文件提取有用信息的多种方法：
1、使用反病毒软件来确认程序样本的恶意性。
2、使用哈希来识别恶意代码。
3、从文件的字符串列表、函数和文件头信息中发掘有用信息。

PE文件格式
可移植执行（PE)文件格式是Window可执行文件、对象代码和DLL所使用的标准格式。
包含一个PE文件头，随后是一系列的分节。
文件头：
导入函数：恶意代码使用了那些库中的哪些函数。
导出函数：恶意代码期望被其他程序或者库所调用的函数。
时间戳：程序是在什么时候被编译的。
分节：文件分节的名称，以及他们在磁盘与内存中的大小。
子系统：指示程序是一个命令行还是图形界面应用程序。
资源：字符串、图标、菜单项和文件中包含的其他信息。

分节：
.text 包含可执行代码
.rdata 包含程序中全局可访问的只读数据
.data 存储程序中都可以访问的全局数据
.idata 有时会显示和存储导入函数信息、如果这个节不存在时，导入函数信息会存储在.rdata节中。
.edata 有时会显示和存储导出函数信息，如果这个节不存在时，导出函数会存储在.rdata节中。
.pdata 只在64位可执行文件中存在，存储异常处理信息。
.rsrc 存储可执行文件所需的资源。
.reloc 包含用来重定位库文件的信息。


Windows API
访问文件系统的API
1、createFile  用来创建新文件，或者打开一个已存在的文件、管道、流、以及IO设备
2、ReadFile和WriteFile 进行文件读写，都将文件作为流来操作。
3、CreateFileMapping和MapViewOfFile 文件映射经常被恶意代码作者使用，因为它允许将一个文件加载到内存中，以便更容易的进行操作。CreateFileMapping函数负责从磁盘上加载一个文件到内存中，MapViewOfFile则返回一个指向映射的基地址指针，它可以用来访问内存中的文件，程序调用这两个函数的，能够使用从MapViewOfFile函数返回的指针，在文件中的任意位置进行读取和写入。这一特性在解析一个文件格式时其顺极其，因为你可以简单的跳转到不同的内存地址。

Windows注册表
注册表是用来保存操作系统与程序的配置信息，比如设置和选项。包括网络驱动、启动项、用户账户、以及其他信息。
恶意代码经常使用注册表来完成持久驻留和存储配置数据。恶意代码添加项到注册表中，这使他在计算机引导时能够自动运行。
根键：注册表被划分为 成为根键的5个顶层节。
子键：一个子键就像是一个文件夹中的子文件夹。
键：一个键是一个注册表中的文件夹，他可以包含额外的文件夹或者键值。根键和子键都是键。
值项：一个值项是一个配对的名字和值
值或数据：存储在注册表项中的数据。

注册表根键
HKEY_LOCAL_MACHINE(HKLM) 保存对本地及其全局设置
HKEY_CURRENT_USER(HKCU) 保存当前用户特定的设置
HKEY_CLASSES_ROOT 保存定义的类型信息
HKEY_CURRENT_CONFIG 保存关于当前硬件配置的设置，特别是与当前和标准配置之间不同的部分
HKEY_USERS 定义默认用户、新用户和当前用户的配置

DLL
动态链接库，一个DLL程序是不能独立运行的可执行文件，但他可以导出一些被其他应用使用的函数。

恶意代码作者如何使用DLL
1、保存恶意代码：有时，恶意代码作者发现将恶意代码保存到一个DLL文件比一个exe文件更加有利。有些恶意代码会附加到其他进程，但是没一个进程只能包含一个exe文件，因此，恶意代码有时使用DLL程序，来讲他自己加载到另外一个进程中。
2、通过使用Window DLL：几乎所有的恶意代码都使用在每个系统上都可以发现的window基础的DLL程序。window DLL程序几乎包含了需要与操作系统交互的功能。而一个恶意程序使用window DLL的方式，经常为恶意代码分析师提供巨大的洞察力。
3、通过使用第三方DLL：恶意代码也可以使用第三方DLL来和其他程序交互，当你看见从一个第三方DLL导入函数的恶意代码时，你可以推断它正在和那个程序交互，来完成他的目标。

基本DLL结构
DLL使用PE文件格式，并且只有一个单一标志，只是这个文件是一个DLL，而不是exe。DLL京城有更多的导出函数，并且通常导入函数较少，除了那个标志之外，一个DLL和exe之间没有实质的区别。
DLL的主函数是Dllmain。他没有标记，而且并不是一个DLL中的导出函数，但是他在PE头中被指定为文件的入口点。任何时候一个进程加载或者卸载库，会创建一个新线程，或者一个已存在的线程结束时，这个函数就会被调用来通知DLL。这个通知允许DLL来管理每一个进程或每个线程的资源。

内核与用户模式
window使用两种处理器特权级别：内核模式和用户模式
在用户模式下，每一个进程有他自己的内存、安全权限、以及资源。如果一个用户模式程序执行一个无效指令并崩溃，window可以回收所有资源，并终止这个程序。
通常，用户模式不能直接访问硬件，并且他被限制只能访问CPU上所有寄存器和可用指令的一个子集。为了在用户模式中操作硬件或者改变内核的状态，你必须依赖于window API。
所有运行在内核的进程共享资源和内存地址。内核模式代码有更少的安全检查。如果在内核运行的代码执行并且包含无效指令，操作系统就不能继续运行，产生的结果就是著名的window蓝屏。
运行在内核模式的恶意代码可以更容易的干扰安全程序和绕过防火墙，但是，开入内核模式代码比开发用户模式代码更加困难，一个主要障碍就是内核代码在开发和调试时更加可能是系统崩溃。另外，许多常用函数在内核中也是不可用的。

内核模式与用户模式调试(使用不同的调试软件包）
在用户模式中，调试器在与被调试的代码运行在通过一个系统中。在用户模式下进行调试时，你调试的是单个可以执行程序，操作系统会将它与其他可执行程序隔离。
由于操作系统只有一个内核，因此内核调试需要两个系统上进行：如果内核中有一个断电，那么就没有任何应用可以在该系统上运行。因此，在进行内核调试时，一个系统运行被调试的代码，另一个运行调试器，除此之外，必须配置操作系统使其开启内核调试功能，并将两个系统连通。
WinDbg是当前唯一支持内核调试的流行调试器。OllyDbg时恶意代码分析人员使用最多的调试器，但是他不支持内核调试。

下载器和启动器
下载器：从互联网上下载其他的恶意代码，然后在本地系统中运行。下载器通常会于漏洞利用打包在一起。下载器常用Windows API函数URLDownloadtoFileA和WinExe,来下载并运行新的恶意代码。

后门
后门是另外一种类型的恶意代码，它能让攻击者远程访问一个受害的机器。后门代码往往实现了全套功能，所以当使用一个后门时，攻击者通常不需要下载额外的恶意代码。

远程控制工具与僵尸网络的区别
远程控制工具：被用来远程管理一台或者多台计算机。
僵尸网络：被感染主机的一个集合，都单一实体控制。
1、僵尸网络感染和控制数以百万级的主机，远程控制工具通常只控制很少数量的主机。
2、僵尸网络中的所有主机在同一时刻被控制，而远程控制工具是以每个受害者为单位进行远程控制，因为远程控制工具要求攻击者与受害主机之间更紧密的交互。
3、远程控制工具被用来执行针对性的攻击，而僵尸网络用来进行大规模攻击。

登录凭证窃密器
攻击者经常会不遗余力地去登录凭证，他们主要使用以下三种类型的恶意代码：
1、等待用户登录以窃取登陆凭证的程序
2、转储windows系统中存放信息的程序，例如密码哈希值，程序直接使用它，或者对他进行离线破解。
3、击键记录程序。

击键记录
击键记录是一种传统形式的窃取登录凭证方法，当击键记录开启式，恶意代码能够记录用户纪检操作，从而让攻击者能够观察到用户敲入的数据。
基于内核的击键记录器：用户模式下的应用程序很难探测到基于内核的击键记录。他们疆场作为Rootkit的一部分并且他们作为一个键盘驱动绕过用户空间应用程序和保护，来捕获击键操作。
用户空间的击键记录器：windows用户空间的击键记录器通常使用windows API，并且常通过挂钩或者轮询来实现，挂钩在键盘每次按下时用windows API通知恶意代码，通常使用SetWindowsHookEx安装挂钩、轮询使用windows API不断地查询按键的状态，它通常使用函数GetAsyncKeyState和GetForegroundWindow。

DLL加载顺序劫持
DLL加载顺序劫持是一种简单隐蔽的技术，它允许恶意代码编写者在不适用注册表项或者特洛伊二进制文件的前提下创建一个存活的、恶意的DLL程序。
在Windows XP上加载DLL的默认搜索顺序：
1、加载应用程序的目录。
2、当前目录。
3、系统目录（使用GetSystemDirectory函数获取的路径，例如../Windows/System32/)。
4、16位子系统的系统目录（例如.../Windows/System)。
5、Windows目录（使用GetSystemDirectory函数获取的路径，例如../Windows）
6、PATH环境变量中列出的目录。


启动器：一次可执行的问价，用来安装立即运行或者将来秘密执行的恶意代码。启动器通常包含一个他要加载的恶意代码。需要以管理员权限运行，或者通过提权拥有这些权限。

进程注入
DLL注入：强迫使用一个远程进程加载恶意DLL程序，同时它也是最常使用的秘密加载技术。
直接注入：直接注入也涉及在远程进程的内存空间中分配和插入代码，直接将恶意代码注入到远程进程中。
进程替换：讲一个可执行文件重写到一个将运行进程的内存空间

本地和远程钩子
本地狗子：被用来观察和操作发往进程内部的信息。
远程钩子：被用来观察和操作发往一个远程进程的消息（系统中的另外一个进程）。

加密恶意代码目的
1、隐藏配置细腻。
2、窃取信息之前将他保存到一个临时文件。
3、存储需要使用的字符串。
4、将恶意代码伪装成一个合法的工具，隐藏恶意代码活动中使用的字符串。


简单数据加密的优点
1、因为他们足够小，所以可以在空间受限的环境中。
2、它们没有复杂加密算法那么明显。
3、他们开销低，因此他们对性能几乎没有影响。


使用标准的加密存在以下漏洞
1、加密库很大，所以恶意代码需要静态的集成或者链接到已有的代码中。
2、链接主机上现有的代码可能降低可以执行。
3、标准加密库比较容易探测。
4、对称加密算法需要考虑如何隐藏秘钥。

识别标准加密
1、识别字符串和导入
2、查找字符串。

自定义加密
恶意代码经常使用自创的加密方案，一种方案是将多个简单加密方法组装到一起。另外一种方案就是开发一种与标准加密算法相似的自定义加密算法。

自定义加密的优势
1、对于攻击者，自定义加密方法拥有它自身的优势，主要是因为他们保留了简单加密策略的特点（体积小和加密不明显），同时使逆向工作变得十分困难。
2、攻击者可以根据自己的需要创建任意的加密方案，它们可能使用也可能不使用一个明显的密钥，所以会增加解密的难度。

重现恶意代码中的加密或者解密函数
1、重新编写函数
2、使用恶意代码中存在的函数。 

针对攻击者，可以确定出调查活动
1、发送带有到某个特定链接的针对性网络钓鱼邮件，观察视图从期望地理区域之外IP地址发来链接的访问。
2、设计一个利用方式，在博客评论中创建一个经过编码的链接，从而有效的创建一个私人的但可以公开访问的感染审计记录。
3、在恶意代码中嵌入一个未使用域名，观察对这个域名的解析。

更深层次的分析有两个目标
1、完全覆盖功能：使用动态分析时增加对代码的覆盖率，这个过程可以根据恶意代码实际流量或者静态分析技术的指导来执行。
2、了解功能，以及输入输出：静态分析可以用于查看在内容的什么地方和如何被生成，同时也可以预测恶意代码的行为，而动态分析则可以用来验证静态分析所预测的行为。

了解攻击者的意图（3条经验规则）
1、专注属于两端之间的协议元素。仅改变客户端代码或者服务器端代码，要比改变两端的代码更加容易。查找在客户端和服务器端代码中共同使用的协议元素，并根据这些元素创建特征。这样，如果想让这类特征无效，攻击者需要做更多额外的工作。
2、专注于已知的任何协议元素作为密钥的部分：通常情况下，一些硬编码的协议组件会被作为密钥使用。
3、确定流量中不太明显的协议元素：有时，多个防御者同时行动会妨碍恶意代码的检测。如果另外一个防御者创建了一个特征，这个特征对攻击者取得了成功，则攻击者可能被迫调整他们的恶意代码。
